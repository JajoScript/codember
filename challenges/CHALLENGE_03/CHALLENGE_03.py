"""
** El Desaf칤o del Cifrado Esp칤a **

Un grupo de esp칤as ha descubierto que su sistema de cifrado de mensajes est치 comprometido.

Han encontrado algunas contrase침as que no cumplen con laPol칤tica de Seguridad de Cifrado que ten칤an establecida cuando fueron creadas.

Para solucionar el problema, han creado una lista (tu entrada al desaf칤o) de contrase침as (seg칰n la base de datos corrupta) y la pol칤tica de seguridad cuando esa clave fue establecida.

Ejemplo de la lista:

    2-4 f: fgff
    4-6 z: zzzsg
    1-6 h: hhhhhh

Cada l칤nea indica, separado por :, la pol칤tica de la clave y la clave misma.

La pol칤tica de la clave especifica el n칰mero m칤nimo y m치ximo de veces que un car치cter dado debe aparecer para que la clave sea v치lida. Por ejemplo, 2-4 f significa que la clave debe contener f al menos 2 veces y como m치ximo 4 veces.

Sabiendo esto, en el ejemplo anterior, hay 2 claves v치lidas:

La segunda clave, zzzsg, no lo es; contiene 3 veces la letra z, pero necesita al menos 4. Las primeras y terceras claves son v치lidas: contienen la cantidad adecuada de f y h, respectivamente, seg칰n sus pol칤ticas.
** Tu desaf칤o: **

Determina cu치ntas claves de cifrado son v치lidas seg칰n sus pol칤ticas.
** C칩mo resolverlo **

1. Analiza la lista de pol칤ticas y claves de cifrado que encontrar치s en este archivo: https://codember.dev/data/encryption_policies.txt

2. Crea un programa que devuelva la clave inv치lida n칰mero 42 (de todas las claves inv치lidas, la 42춹 en orden de aparici칩n). Por ejemplo:
submit bqamidgewtbuz
"""
import os

#* -- Lectura de archivos.
def read_file(file_name: str) -> str:
  file_path = f"{os.getcwd()}/challenges/CHALLENGE_03/{file_name}"

  File = open(file_path, "rt");
  data:str = File.read().strip();
  File.close();

  return data;

def comprobador_politicas(data:str):
  passAndPolicy = data.split("\n");

  invalidPasswords:str = [];
  # Ciclo para recorrer las pol칤ticas y contrase침as.
  for passpolicy in passAndPolicy:
    [policy, password] = passpolicy.split(":"); # [2-4 f, fgff]
    [policy, letter] = policy.split(" "); # [2-4, f]
    [min, max] = policy.split("-"); # [2, 4]

    # Identificando las contrase침as invalidas.
    if (password.count(letter) < int(min) or password.count(letter) > int(max)):
      invalidPasswords.append(password);

  return invalidPasswords[41];

#* -- Ejecuci칩n.
def challenge_03():
  # Lectura del archivo.
  data:str = read_file("CHALLENGE_03.txt");

  # Comprobaci칩n de pol칤ticas.
  resultado:str = comprobador_politicas(data);
  print("[游냁:Resultado] contrase침a invalida n춿 42: ", resultado);

